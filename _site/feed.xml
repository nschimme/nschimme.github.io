<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-24T14:07:26-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2019/10/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-10-24T13:59:52-07:00</published><updated>2019-10-24T13:59:52-07:00</updated><id>http://localhost:4000/jekyll/update/2019/10/24/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/10/24/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Guide to add zRAM on the Synology DiskStation DS212j</title><link href="http://localhost:4000/2017/05/22/guide-to-add-zram-on-the-synology-diskstation.html" rel="alternate" type="text/html" title="Guide to add zRAM on the Synology DiskStation DS212j" /><published>2017-05-22T00:55:24-07:00</published><updated>2017-05-22T00:55:24-07:00</updated><id>http://localhost:4000/2017/05/22/guide-to-add-zram-on-the-synology-diskstation</id><content type="html" xml:base="http://localhost:4000/2017/05/22/guide-to-add-zram-on-the-synology-diskstation.html">&lt;p&gt;My Synology DiskStation DS212j has gotten slower over the years ever since I bought in 2012. DSM
operating system security and software upgrades introduced feature bloat that required more memory and caused memory to page to disk. &lt;a href=&quot;https://en.wikipedia.org/wiki/Zram&quot;&gt;Wikipedia&lt;/a&gt; gives an amazing overview of why paging is bad and why zRAM is amazing for memory constrained PCs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;zram&lt;/strong&gt; (also called &lt;strong&gt;zRAM&lt;/strong&gt; and, initially, &lt;strong&gt;compcache&lt;/strong&gt;) is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_kernel&quot; title=&quot;Linux kernel&quot;&gt;Linux kernel&lt;/a&gt; feature that provides a form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_memory_compression&quot; title=&quot;Virtual memory compression&quot;&gt;virtual memory compression&lt;/a&gt;. zram increases performance by avoiding &lt;a href=&quot;https://en.wikipedia.org/wiki/Paging&quot; title=&quot;Paging&quot;&gt;paging&lt;/a&gt; to disk and using a compressed &lt;a href=&quot;https://en.wikipedia.org/wiki/Block_device&quot; title=&quot;Block device&quot;&gt;block device&lt;/a&gt; in &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot; title=&quot;Random-access memory&quot;&gt;RAM&lt;/a&gt; instead, inside which paging takes place until it is necessary to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_swap&quot; title=&quot;Linux swap&quot;&gt;swap space&lt;/a&gt; on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_disk_drive&quot; title=&quot;Hard disk drive&quot;&gt;hard disk drive&lt;/a&gt;.
Since using zram is an alternative way to provide swapping on RAM, zram
allows Linux to make a better use of RAM when swapping/paging is
required, especially on older computers with less RAM installed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pretty cool, huh? The Android community often uses zRAM as a way to bring back older
devices back to life and I figured I could do the same with my aging DiskStation that only came with 256MB of RAM compared to the more recent
DS216 that comes with twice that at 512MB.&lt;/p&gt;

&lt;p&gt;I
successfully compiled and added the zRAM module to my DS212j and wanted to share the steps. My DS212j uses the Linux kernel 2.6.32 so this guide should be applicable to any Synology DS that uses the same kernel.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr&gt;&lt;h2&gt;Setting up the DSM 6.1 Tool Chain&lt;/h2&gt;

&lt;p&gt;Synology has provided excellent documentation on how to compile kernel modules. You should follow their tutorial on how to &lt;a href=&quot;https://developer.synology.com/developer-guide/create_package/install_toolkit.html&quot;&gt;setup the toolkit&lt;/a&gt; to compile the kernel.&lt;/p&gt;

&lt;p&gt;Steps for the DS212j are roughly:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Setup toolkit: &lt;code&gt;mkdir -p /toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &lt;a href=&quot;https://github.com/SynologyOpenSource/pkgscripts-ng.git&quot;&gt;https://github.com/SynologyOpenSource/pkgscripts-ng.git&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /toolkit/pkgscripts-ng/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./EnvDeploy -v 6.1 -p 6281&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Compiling the 2.6.32 Kernel&lt;/h2&gt;

&lt;p&gt;You will need to follow the Synology documentation to &lt;a href=&quot;https://developer.synology.com/developer-guide/create_package/compile_kernel_module.html&quot;&gt;compile kernel modules here&lt;/a&gt; in order to build the LZO kernel module. This is a dependent kernel module for zRAM.&lt;/p&gt;

&lt;p&gt;Steps are roughly:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Download the kernel source for the closest branch that is currently deployed on your Synology:
&lt;a href=&quot;https://sourceforge.net/projects/dsgpl/files/Synology%20NAS%20GPL%20Source/&quot;&gt;https://sourceforge.net/projects/dsgpl/files/Synology%20NAS%20GPL%20Source/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extract the source to &lt;code&gt;/toolkit/build_env/ds.x64-6.1/root/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the tool chain chroot: &lt;code&gt;chroot /toolkit/build_env/ds.x64-6.1 /bin/bash&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cd root/linux-2.6.32&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cp synoconfigs/88f6281 .config&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;export ARCH=&quot;arm&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;export CROSS_COMPILE=&quot;/usr/local/arm-marvell-linux-gnueabi/bin/arm-marvell-linux-gnueabi-&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;make oldconfig&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;make menuconfig&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build LZO modules because they’re dependencies for zRAM.&lt;br/&gt;Enter &lt;code&gt;Cryptographic API&lt;/code&gt; to select &lt;code&gt;LZO compression algorithm&lt;/code&gt; as a module. Exit and save.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;make prepare&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;make modules&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code&gt;lzo_compress.ko&lt;/code&gt;, &lt;code&gt;lzo_decompress.ko&lt;/code&gt;, &lt;code&gt;lzo.ko&lt;/code&gt; to your Synology&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Compiling the Compcache Kernel Module&lt;/h2&gt;

&lt;p&gt;I have successfully compiled the Compcache 0.6.2 kernel module and gotten it to work with the stock 2.6.32 kernel. The latest version doesn’t seem to work so we’re going to stick with 0.6.2 where we will follow the &lt;a href=&quot;https://code.google.com/archive/p/compcache/wikis/CompilingAndUsingNew.wiki&quot;&gt;Compcache documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;code&gt;cd /root/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download Compcache 0.6.2 module source: &lt;code&gt;wget &lt;a href=&quot;https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/compcache/compcache-0.6.2.tar.gz&quot;&gt;https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/compcache/compcache-0.6.2.tar.gz&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -xzf compcache-0.6.2.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd compcache-0.6.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export KERNEL_BUILD_PATH=/root/linux-2.6.32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;ramzswap.ko&lt;/code&gt; to your Synology&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Installation&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Copy kernel modules to Synology DSM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test kernels by inserting them&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre class=&quot;prettyprint&quot;&gt;
/sbin/insmod /lib/modules/lzo_decompress.ko
/sbin/insmod /lib/modules/lzo_compress.ko
/sbin/insmod /lib/modules/lzo.ko
/sbin/insmod /lib/modules/ramzswap.ko disksize_kb=131072
/sbin/swapon /dev/ramzswap0 -p 5
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable swap with:
&lt;code&gt;/sbin/swapon /dev/ramzswap0 -p 5&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Verify everything worked by checking dmesg for errors&lt;/li&gt;
&lt;li&gt;&lt;pre class=&quot;prettyprint&quot;&gt;nschimme@NilsDiskStation:~$ dmesg | grep -E &quot;(ramzswap|lzo)&quot;
[ 100.500000] alg: No test for lzo (lzo-generic)
[ 100.550000] ramzswap: num_devices not specified. Using default: 1
[ 100.550000] ramzswap: /dev/ramzswap0 initialized: disksize_kb=131072
[ 100.560000] ramzswap: Invalid ioctl 21297
[ 101.560000] Adding 131064k swap on /dev/ramzswap0. Priority:5 extents:1 across:131064k SS
nschimme@NilsDiskStation:~$&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add above &lt;code&gt;insmod&lt;/code&gt;/&lt;code&gt;swapon&lt;/code&gt; commands to &lt;code&gt;/etc/rc.local&lt;/code&gt; to make the changes permanent&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;zRAM Results&lt;/h2&gt;

&lt;p&gt;It’s super effective! I’ve noticed that there was roughly ~100MB of paged memory usually and I’ve managed to get it all to fit within ~30MB of compressed memory space rather than going down to the hard drive. Responsiveness in the DSM OS has greatly improved as a result.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;nschimme@NilsDiskStation:~$ free -m
total        used        free      shared  buff/cache   available
              total        used        free      shared  buff/cache   available
Mem:            243          79          60           3         104         123
Swap:          2175          94        2081
nschimme@NilsDiskStation:~$ swapon
NAME           TYPE      SIZE  USED PRIO
/dev/md1       partition   2G    0B   -1
/dev/ramzswap0 partition 128M 94.9M    5
nschimme@NilsDiskStation:~$ sudo rzscontrol /dev/ramzswap0 --stats
DiskSize:	  131072 kB
NumReads:	    9890
NumWrites:	   26730
FailedReads:	       0
FailedWrites:	       0
InvalidIO:	       0
NotifyFree:	       0
ZeroPages:	    7231
GoodCompress:	      78 %
NoCompress:	       2 %
PagesStored:	   19499
PagesUsed:	    6640
OrigDataSize:	   77996 kB
ComprDataSize:	   26200 kB
MemUsedTotal:	   26560 kB
nschimme@NilsDiskStation:~$&lt;/pre&gt;</content><author><name></name></author><category term="synology" /><category term="zram" /><category term="ds212j" /><category term="compcache" /><category term="hacking" /><summary type="html">My Synology DiskStation DS212j has gotten slower over the years ever since I bought in 2012. DSM operating system security and software upgrades introduced feature bloat that required more memory and caused memory to page to disk. Wikipedia gives an amazing overview of why paging is bad and why zRAM is amazing for memory constrained PCs.</summary></entry><entry><title type="html">no title</title><link href="http://localhost:4000/2017/01/22/some-small-jumps-and-blooper-highlights-at.html" rel="alternate" type="text/html" title="no title" /><published>2017-01-22T11:35:21-08:00</published><updated>2017-01-22T11:35:21-08:00</updated><id>http://localhost:4000/2017/01/22/some-small-jumps-and-blooper-highlights-at</id><content type="html" xml:base="http://localhost:4000/2017/01/22/some-small-jumps-and-blooper-highlights-at.html">&lt;iframe width=&quot;400&quot; height=&quot;225&quot;  id=&quot;youtube_iframe&quot; src=&quot;https://www.youtube.com/embed/GdQkKufvnP0?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=https://safe.txmblr.com&amp;amp;wmode=opaque&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;p&gt;Some small jumps and blooper highlights at Whistler last weekend!&lt;/p&gt;</content><author><name></name></author><category term="whistler" /><category term="snowboarding" /><category term="travel" /><category term="outdoors" /><summary type="html">Some small jumps and blooper highlights at Whistler last weekend!</summary></entry><entry><title type="html">no title</title><link href="http://localhost:4000/2017/01/02/crazy-pow-at-mt-bachelor-in-oregon-we-decided-to.html" rel="alternate" type="text/html" title="no title" /><published>2017-01-02T18:08:58-08:00</published><updated>2017-01-02T18:08:58-08:00</updated><id>http://localhost:4000/2017/01/02/crazy-pow-at-mt-bachelor-in-oregon-we-decided-to</id><content type="html" xml:base="http://localhost:4000/2017/01/02/crazy-pow-at-mt-bachelor-in-oregon-we-decided-to.html">&lt;iframe width=&quot;400&quot; height=&quot;225&quot;  id=&quot;youtube_iframe&quot; src=&quot;https://www.youtube.com/embed/TiKqAG-i2pw?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=https://safe.txmblr.com&amp;amp;wmode=opaque&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;h2&gt;Crazy Pow at Mt Bachelor in Oregon&lt;/h2&gt;&lt;p&gt;We decided to hit up Oregon and were lucky enough have it dump. Amazing times!&lt;br/&gt;&lt;/p&gt;</content><author><name></name></author><category term="snow" /><category term="pow" /><category term="outdoors" /><summary type="html">Crazy Pow at Mt Bachelor in OregonWe decided to hit up Oregon and were lucky enough have it dump. Amazing times!</summary></entry><entry><title type="html">Gaming with XDMA CrossFire Passthrough on Ubuntu 17.04</title><link href="http://localhost:4000/2016/12/23/gaming-with-xdma-crossfire-passthrough-on-ubuntu.html" rel="alternate" type="text/html" title="Gaming with XDMA CrossFire Passthrough on Ubuntu 17.04" /><published>2016-12-23T23:34:45-08:00</published><updated>2016-12-23T23:34:45-08:00</updated><id>http://localhost:4000/2016/12/23/gaming-with-xdma-crossfire-passthrough-on-ubuntu</id><content type="html" xml:base="http://localhost:4000/2016/12/23/gaming-with-xdma-crossfire-passthrough-on-ubuntu.html">&lt;p&gt;&lt;figure data-orig-width=&quot;1999&quot; data-orig-height=&quot;633&quot; class=&quot;tmblr-full&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/69e52ca46b18876ceada4d929b01b215/tumblr_inline_oio7fv287n1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;1999&quot; data-orig-height=&quot;633&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;I have used Windows as my primary OS ever since I was a teenager because I am a gamer. Ironically, my gaming hobby also introduced me to my programming/Linux hobby (and now career) which are always at odds with one another. I can either game, which has an unfortunate requirement of needing Windows, or hack, which usually requires Linux. This meant I had to constantly dual boot between Windows and Linux or suffer with a virtual machine with poor video performance. Not ideal.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;However, a few years ago the Linux Kernel Virtual Machine (KVM) project enabled near native Windows guest performance by passing through a host video card to a guest. I was extremely interested in trying this out but was deterred by a lack of proof that SLI or CrossFire worked since my other, other hobby is also being a hardware enthusiast.&lt;/p&gt;&lt;p&gt;All that changed when I &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=162768&amp;amp;p=219&quot;&gt;discovered a post authored by Duelist&lt;/a&gt; detailing that he had successfully got his XDMA Radeons to run in CrossFire! I gave it a try it myself and found that documentation was sparse and mostly geared towards Arch Linux. I have a preference for Ubuntu and couldn’t really find anything modern that would help me. All in all, I was successful and am extremely happy with the performance of my box. Hopefully this guide will also help others that have multiple Radeons that they wish to CrossFire!&lt;/p&gt;&lt;!-- more --&gt;&lt;hr&gt;&lt;p&gt;&lt;i&gt;Note:&lt;/i&gt; Large parts of this guide have been pieced together from various tutorials and user posts from around the web. The &lt;a href=&quot;https://www.pugetsystems.com/labs/articles/Multiheaded-NVIDIA-Gaming-using-Ubuntu-14-04-KVM-585/&quot;&gt;Puget Systems Ubuntu 14.04 + KVM guide&lt;/a&gt; is a great Ubuntu starting point when paired with &lt;a href=&quot;https://turlucode.com/qemu-kvm-on-arch-linux-guide/&quot;&gt;QEMU-KVM on Arch Linux Guide&lt;/a&gt;. If you get stuck the &lt;a href=&quot;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF&quot;&gt;Arch Linux PCI passthrough via OVMF wiki&lt;/a&gt;, the Arch Linux forums, or the &lt;a href=&quot;https://www.reddit.com/r/VFIO/wiki/index&quot;&gt;/r/VFIO wiki&lt;/a&gt; are other valuable references.&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;System Requirements&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;CPU &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-virtualization-technology-for-directed-io-vt-d-enhancing-intel-platforms-for-efficient-virtualization-of-io-devices&quot;&gt;VT-d&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Motherboard can enable VT-d support&lt;/li&gt;
&lt;li&gt;2+ Radeon eGPUs with &lt;a href=&quot;https://en.wikipedia.org/wiki/AMD_CrossFireX#XDMA&quot;&gt;XDMA CrossFire&lt;/a&gt; and &lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2266916&quot;&gt;UEFI BIOS&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Intel iGPU or a third eGPU&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;BIOS&lt;br/&gt;&lt;/h2&gt;
&lt;p&gt;Enable VT-d virtualization in your BIOS and enable your integrated GPU.&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Ubuntu Setup&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.ubuntu.com/YakketyYak/ReleaseNotes#Download_Ubuntu_16.10&quot;&gt;Install Ubuntu 16.10&lt;/a&gt; or 17.04 if you want virt-manager because it comes with a more modern libvirt 2.1 than Ubuntu 16.04 LTS.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;After you have installed Ubuntu you will now have the stock kernel but it won’t be virtualization aware. We will need to enable the VFIO (Virtual Finction I/O) kernel modules to allow us to pass full devices to the guest machine.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/modules&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;

Add the following to the bottom of the file:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;# Modules required for VFIO
vfio
vfio_iommu_type1
vfio_pci
kvm
kvm_intel 
&lt;/pre&gt;&lt;p&gt;Next we will need to enable Intel IOMMU via the boot loader:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/default/grub
&lt;/pre&gt;&lt;pre class=&quot;prettyprint&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash intel_iommu=on vfio_iommu_type1.allow_unsafe_interrupts=1&quot;
&lt;/pre&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo update-grub
&lt;/pre&gt;&lt;p&gt;Now we will need to identify the PCI-Bus IDs of the hardware devices that we wish to pass through. In this case I’m passing through my R9 290s and their HDMI audio devices which have PCI-Bus IDs 1002:67b1 and 1002:aac8.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;lspci -nn | grep AMD
01:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Hawaii PRO [Radeon R9 290/390] [1002:67b1]
01:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Hawaii HDMI Audio [Radeon R9 290/290X / 390/390X] [1002:aac8]
02:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Hawaii PRO [Radeon R9 290/390] [1002:67b1]
02:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Hawaii HDMI Audio [Radeon R9 290/290X / 390/390X] [1002:aac8]
&lt;/pre&gt;&lt;p&gt;Add this to a special vfio.conf that will be run when the vfio-pci module is started:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/modprobe.d/vfio.conf&lt;/pre&gt;&lt;p&gt;Add the following to the file replacing you PCI-Bus IDs as needed:&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
# Ensure that the vfio-pci module gets loaded before any video drivers
softdep radeon pre: vfio-pci
softdep amdgpu pre: vfio-pci
softdep nouveau pre: vfio-pci
softdep drm pre: vfio-pci

# vfio-pci driver will be loaded onto the following PCI-Bus IDs
options vfio-pci ids=1002:67b1,1002:aac8&lt;/pre&gt;

&lt;p&gt;Blacklist the opensource radeon driver from starting:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/modprobe.d/blacklist.conf&lt;/pre&gt;&lt;p&gt;Add the following to the file&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;# Drivers for devices that are passed to VFIO
radeon&lt;/pre&gt;

&lt;p&gt;Reboot your machine and verify that the video cards have been stubbed out via vfio-pci.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;dmesg | grep vfio
[    7.206251] vfio_pci: add [1002:67b1[ffff:ffff]] class 0x000000/00000000
[    7.250264] vfio_pci: add [1002:aac8[ffff:ffff]] class 0x000000/00000000
&lt;/pre&gt;&lt;h2&gt;QEMU Setup&lt;br/&gt;&lt;/h2&gt;

&lt;p&gt;Next install the  Open Virtual Machine Firmware (OVMF) and QEMU so that we can run a virtual machine.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo apt-get install ovmf qemu-kvm
&lt;/pre&gt;&lt;p&gt;The OVMF is a project to enable UEFI support for virtual machines. It’s a BIOS that is needed to boot our Windows guest and it needs a variable store partition that we’re going to now create:&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo cp /usr/share/OVMF/OVMF_VARS.fd /var/lib/libvirt/qemu/nvram/windows_VARS.fd&lt;/pre&gt;&lt;p&gt;Next up, create your Windows image for the guest to use. If you’re interested in why these settings are used &lt;a href=&quot;https://kashyapc.com/2011/12/02/little-more-disk-io-perf-improvement-with-fallocateing-a-qcow2-disk/&quot;&gt;this should help clear things up&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo qemu-img create -f qcow2 -o preallocation=&lt;code&gt;falloc&lt;/code&gt; /var/lib/libvirt/images/windows10.qcow2 80G
&lt;/pre&gt;&lt;h2&gt;QEMU Test Drive&lt;br/&gt;&lt;/h2&gt;

&lt;p&gt;Try running the VM using just QEMU after you alter the necessary fields to your machine’s specification. This will be the number of cores/threads, amount of memory, or paths to the installation media. I wouldn’t suggest you change too much otherwise. Also, please note that Windows 10 will BSOD &lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2289210&quot;&gt;unless qemu emulates a core2duo&lt;/a&gt; class processor. &lt;br/&gt;&lt;/p&gt;&lt;p&gt;In this example I have also mounted the&lt;a href=&quot;https://fedoraproject.org/wiki/Windows_Virtio_Drivers&quot;&gt; Windows virtio drivers&lt;/a&gt; which you should download beforehand.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo qemu-system-x86_64 -enable-kvm -M q35 -m 8192 -cpu core2duo,+nx,kvm=off \
-smp 4,sockets=1,cores=4,threads=1 \
-object iothread,id=iothread1 -object iothread,id=iothread2 \
-drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd \
-drive if=pflash,format=raw,file=/var/lib/libvirt/qemu/nvram/windows_VARS.fd \
-drive if=virtio,format=qcow2,file=/var/lib/libvirt/images/windows10.qcow2,cache=writeback \
&lt;b&gt;-device ioh3420,port=0xe0,chassis=1,id=pcie.1,bus=pcie.0,multifunction=on,addr=0x1c \
-device ioh3420,port=0x18,chassis=2,id=pcie.2,bus=pcie.0,multifunction=on,addr=0x3 \
-device vfio-pci,host=01:00.0,bus=pcie.1,addr=00.0,multifunction=on \
-device vfio-pci,host=01:00.1,bus=pcie.1,addr=00.1 \
-device vfio-pci,host=02:00.0,bus=pcie.2,addr=00.0,multifunction=on \
-device vfio-pci,host=02:00.1,bus=pcie.2,addr=00.1 \&lt;/b&gt;
-boot menu=on \
-parallel null \
-serial null \
-vga qxl \
-rtc base=localtime,clock=host \
-drive file=/path/to/virtio-win-0.1.126.iso,index=3,media=cdrom \
-cdrom /path/to/windows10.iso
&lt;/pre&gt;
&lt;p&gt;If you look at the bold configuration above, the trick to getting CrossFire working is to create a unique PCI-e root port switch per GPU (i.e. ioh3420).&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;If you were able to run this command then you should have seen a Tiano UEFI boot screen on your Radeons. If so, you succesfully got to the first step in GPU passthrough. Unfortunately this doesn&amp;rsquo;t mean things will work right off away. You will need the QXL emulated video card as a substitute until everything works.&lt;/p&gt;
&lt;h2&gt;Install Windows on the Guest using QXL Video&lt;/h2&gt;
&lt;p&gt;I had to set up my guest at this stage because there &lt;a href=&quot;https://www.reddit.com/r/VFIO/comments/59t77a/windows_7_vm_stuck_at_boot/d9dx5ol/&quot;&gt;is a bug&lt;/a&gt; that prevents Windows 7 guests from booting QEMU KVMs on libvirt. I installed Windows 7 first (and then upgraded to 8 and then 10) because I don&amp;rsquo;t own a Windows 10 retail copy and can &lt;a href=&quot;https://www.microsoft.com/en-us/accessibility/windows10upgrade&quot;&gt;still upgrade to 10 for free&lt;/a&gt; with a valid version of Windows 7 or 8. You might want to skip this stage and go on directly on to libvirt section to avoid having to re-activate your OS (it seems libvirt changes something that Windows&amp;rsquo; activate system doesn&amp;rsquo;t like).&lt;/p&gt;
&lt;p&gt;Fully install Windows 10 and get it working before you install the Radeon drivers. It just worked for me after this. If you run into weird GPU issue a reboot will usually fix the problem. Please note that I was also unable to get CrossFire working in Windows 7 so its likely that only Windows 8/10 are supported.&lt;/p&gt;

&lt;h2&gt;(Optional: 16.10 and above only) libvirt and virt-manager Setup&lt;br/&gt;&lt;/h2&gt;&lt;figure data-orig-width=&quot;256&quot; data-orig-height=&quot;256&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/c182d5a3e5c909759705c9d480b3e4c7/tumblr_inline_oio9jdQxtQ1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;256&quot; data-orig-height=&quot;256&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Now we’re going to get this working with libvirt and virt-manager in order to allow our VM to autostart on boot.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;We’re going to roughly follow the &lt;a href=&quot;https://help.ubuntu.com/community/KVM/Installation#Install_Necessary_Packages&quot;&gt;Ubuntu KVM guide&lt;/a&gt;. Additional information on virt can be found on the &lt;a href=&quot;http://wiki.libvirt.org/page/UbuntuKVMWalkthrough&quot;&gt;Ubuntu KVM Walkthrough&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo apt-get install virt-manager ubuntu-vm-builder bridge-utils
sudo adduser `id -un` libvirtd&lt;/pre&gt;&lt;p&gt;Next up we’re going to create a file for inclusion as a virt domain.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/libvirt/qemu/windows10.xml&lt;/pre&gt;&lt;p&gt;Alter the following XML similar to what you did above for QEMU and paste it in. The necessary bits to load the unique PCI-e root port switches have been added in bold.&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&amp;gt;
 &amp;lt;name&amp;gt;windows10&amp;lt;/name&amp;gt;
 &amp;lt;uuid&amp;gt;67f3226e-8303-4437-8c20-b8b03d301a77&amp;lt;/uuid&amp;gt;
 &amp;lt;memory unit='GiB'&amp;gt;8&amp;lt;/memory&amp;gt;
 &amp;lt;currentMemory unit='GiB'&amp;gt;8&amp;lt;/currentMemory&amp;gt;
 &amp;lt;vcpu placement='static'&amp;gt;4&amp;lt;/vcpu&amp;gt;
 &amp;lt;iothreads&amp;gt;2&amp;lt;/iothreads&amp;gt;
 &amp;lt;cputune&amp;gt;
   &amp;lt;vcpupin vcpu='0' cpuset='0'/&amp;gt;
   &amp;lt;vcpupin vcpu='1' cpuset='1'/&amp;gt;
   &amp;lt;vcpupin vcpu='2' cpuset='2'/&amp;gt;
   &amp;lt;vcpupin vcpu='3' cpuset='3'/&amp;gt;
   &amp;lt;emulatorpin cpuset='0-3'/&amp;gt;
   &amp;lt;iothreadpin iothread='1' cpuset='0-1'/&amp;gt;
 &amp;lt;/cputune&amp;gt;
 &amp;lt;os&amp;gt;
   &amp;lt;type arch='x86_64' machine='pc-q35-2.6'&amp;gt;hvm&amp;lt;/type&amp;gt;
   &amp;lt;loader readonly='yes' type='pflash'&amp;gt;/usr/share/OVMF/OVMF_CODE.fd&amp;lt;/loader&amp;gt;
   &amp;lt;nvram&amp;gt;/var/lib/libvirt/qemu/nvram/windows_VARS.fd&amp;lt;/nvram&amp;gt;
   &amp;lt;bootmenu enable='yes'/&amp;gt;
 &amp;lt;/os&amp;gt;
 &amp;lt;features&amp;gt;
   &amp;lt;acpi/&amp;gt;
   &amp;lt;apic/&amp;gt;
  &amp;lt;!-- Delete the hyperv element if you're installing Windows 7 --&amp;gt;
   &amp;lt;hyperv&amp;gt;
     &amp;lt;relaxed state='on'/&amp;gt;
     &amp;lt;vapic state='on'/&amp;gt;
     &amp;lt;spinlocks state='on' retries='8191'/&amp;gt;
   &amp;lt;/hyperv&amp;gt;
   &amp;lt;kvm&amp;gt;
     &amp;lt;hidden state='on'/&amp;gt;
   &amp;lt;/kvm&amp;gt;
 &amp;lt;/features&amp;gt;
 &amp;lt;cpu mode='custom' match='exact'&amp;gt;
   &amp;lt;model fallback='allow'&amp;gt;core2duo&amp;lt;/model&amp;gt;
   &amp;lt;topology sockets='1' cores='4' threads='1'/&amp;gt;
   &amp;lt;feature policy='require' name='nx'/&amp;gt;
 &amp;lt;/cpu&amp;gt;
 &amp;lt;clock offset='localtime'&amp;gt;
   &amp;lt;timer name='rtc' tickpolicy='catchup'/&amp;gt;
   &amp;lt;timer name='pit' tickpolicy='delay'/&amp;gt;
   &amp;lt;timer name='hpet' present='no'/&amp;gt;
   &amp;lt;timer name='hypervclock' present='yes'/&amp;gt;
 &amp;lt;/clock&amp;gt;
 &amp;lt;on_poweroff&amp;gt;destroy&amp;lt;/on_poweroff&amp;gt;
 &amp;lt;on_reboot&amp;gt;restart&amp;lt;/on_reboot&amp;gt;
 &amp;lt;on_crash&amp;gt;restart&amp;lt;/on_crash&amp;gt;
 &amp;lt;pm&amp;gt;
   &amp;lt;suspend-to-mem enabled='no'/&amp;gt;
   &amp;lt;suspend-to-disk enabled='no'/&amp;gt;
 &amp;lt;/pm&amp;gt;
 &amp;lt;devices&amp;gt;
   &amp;lt;emulator&amp;gt;/usr/bin/qemu-system-x86_64&amp;lt;/emulator&amp;gt;
   &amp;lt;disk type='file' device='disk'&amp;gt;
     &amp;lt;driver name='qemu' type='qcow2' cache='writeback'/&amp;gt;
     &amp;lt;source file='/var/lib/libvirt/images/windows10.qcow2'/&amp;gt;
     &amp;lt;target dev='vda' bus='virtio'/&amp;gt;
     &amp;lt;boot order='1'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x02' slot='0x04' function='0x0'/&amp;gt;
   &amp;lt;/disk&amp;gt;
   &amp;lt;disk type='file' device='cdrom'&amp;gt;
     &amp;lt;driver name='qemu' type='raw'/&amp;gt;
     &amp;lt;source file='/path/to/virtio-win-0.1.126.iso'/&amp;gt;
     &amp;lt;target dev='sda' bus='sata'/&amp;gt;
     &amp;lt;readonly/&amp;gt;
     &amp;lt;address type='drive' controller='0' bus='0' target='0' unit='0'/&amp;gt;
   &amp;lt;/disk&amp;gt;
   &amp;lt;disk type='file' device='cdrom'&amp;gt;
     &amp;lt;driver name='qemu' type='raw'/&amp;gt;
     &amp;lt;source file='/path/to/windows10.iso'/&amp;gt;
     &amp;lt;target dev='sdb' bus='sata'/&amp;gt;
     &amp;lt;readonly/&amp;gt;
     &amp;lt;address type='drive' controller='0' bus='0' target='0' unit='1'/&amp;gt;
   &amp;lt;/disk&amp;gt;
   &amp;lt;controller type='sata' index='0'&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/&amp;gt;
   &amp;lt;/controller&amp;gt;&lt;br/&gt;&lt;b&gt;
   &amp;lt;controller type='pci' index='0' model='pcie-root'/&amp;gt;
   &amp;lt;controller type='pci' index='1' model='dmi-to-pci-bridge'&amp;gt;
     &amp;lt;model name='i82801b11-bridge'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x0'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='pci' index='2' model='pci-bridge'&amp;gt;
     &amp;lt;model name='pci-bridge'/&amp;gt;
     &amp;lt;target chassisNr='2'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='virtio-serial' index='0'&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x02' slot='0x03' function='0x0'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='usb' index='0' model='ich9-ehci1'&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1d' function='0x7'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='usb' index='0' model='ich9-uhci1'&amp;gt;
     &amp;lt;master startport='0'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1d' function='0x0' multifunction='on'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='usb' index='0' model='ich9-uhci2'&amp;gt;
     &amp;lt;master startport='2'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1d' function='0x1'/&amp;gt;
   &amp;lt;/controller&amp;gt;
   &amp;lt;controller type='usb' index='0' model='ich9-uhci3'&amp;gt;
     &amp;lt;master startport='4'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x1d' function='0x2'/&amp;gt;
   &amp;lt;/controller&amp;gt;&lt;/b&gt;&lt;br/&gt;
   &amp;lt;interface type='network'&amp;gt;
     &amp;lt;mac address='52:54:00:fc:e3:35'/&amp;gt;
     &amp;lt;source network='default'/&amp;gt;
     &amp;lt;model type='virtio'/&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x02' slot='0x01' function='0x0'/&amp;gt;
   &amp;lt;/interface&amp;gt;
   &amp;lt;serial type='pty'&amp;gt;
     &amp;lt;target port='0'/&amp;gt;
   &amp;lt;/serial&amp;gt;
   &amp;lt;console type='pty'&amp;gt;
     &amp;lt;target type='serial' port='0'/&amp;gt;
   &amp;lt;/console&amp;gt;
   &amp;lt;channel type='spicevmc'&amp;gt;
     &amp;lt;target type='virtio' name='com.redhat.spice.0'/&amp;gt;
     &amp;lt;address type='virtio-serial' controller='0' bus='0' port='1'/&amp;gt;
   &amp;lt;/channel&amp;gt;
   &amp;lt;input type='mouse' bus='ps2'/&amp;gt;
   &amp;lt;input type='keyboard' bus='ps2'/&amp;gt;
   &amp;lt;graphics type='spice' autoport='yes'&amp;gt;
      &amp;lt;listen type='address'/&amp;gt;
   &amp;lt;/graphics&amp;gt;
   &amp;lt;video&amp;gt;
      &amp;lt;model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/&amp;gt;
      &amp;lt;address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0'/&amp;gt;
   &amp;lt;/video&amp;gt;
   &amp;lt;sound model='ich6'&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x02' slot='0x02' function='0x0'/&amp;gt;
   &amp;lt;/sound&amp;gt;
   &amp;lt;memballoon model='virtio'&amp;gt;
     &amp;lt;address type='pci' domain='0x0000' bus='0x02' slot='0x05' function='0x0'/&amp;gt;
   &amp;lt;/memballoon&amp;gt;
 &amp;lt;/devices&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt; &amp;lt;qemu:commandline&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='ioh3420,port=0xe0,chassis=1,id=pcie.2,bus=pcie.0,multifunction=on,addr=0x1c'/&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='ioh3420,port=0x18,chassis=2,id=pcie.3,bus=pcie.0,multifunction=on,addr=0x3'/&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='vfio-pci,host=01:00.0,bus=pcie.2,addr=00.0,multifunction=on'/&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='vfio-pci,host=01:00.1,bus=pcie.2,addr=00.1'/&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='vfio-pci,host=02:00.0,bus=pcie.3,addr=00.0,multifunction=on'/&amp;gt;
   &amp;lt;qemu:arg value='-device'/&amp;gt;
   &amp;lt;qemu:arg value='vfio-pci,host=02:00.1,bus=pcie.3,addr=00.1'/&amp;gt;
 &amp;lt;/qemu:commandline&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;lt;/domain&amp;gt;
&lt;/pre&gt;&lt;p&gt;Now load up this domain by running:&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;virsh define windows10.xml&lt;/pre&gt;&lt;p&gt;Before starting the VM we will now&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=162768&amp;amp;p=59&quot;&gt; unfortunately need to allow libvirt to access our VFIO devices&lt;/a&gt;. Identify the paths to your devices:&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;ls /dev/vfio/&lt;br/&gt;15  16  vfio 
&lt;/pre&gt;&lt;p&gt;We will now need to edit the qemu configuration for libvirt.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/libvirt/qemu.conf&lt;/pre&gt;&lt;p&gt;Change the user that the virtual machine runs at to root and also enhance cgroup-device_acl to include the vfio paths we found above.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;
user = &quot;root&quot;
group = &quot;root&quot;
cgroup_device_acl = [
   &quot;/dev/null&quot;, &quot;/dev/full&quot;, &quot;/dev/zero&quot;,
   &quot;/dev/random&quot;, &quot;/dev/urandom&quot;,
   &quot;/dev/ptmx&quot;, &quot;/dev/kvm&quot;, &quot;/dev/kqemu&quot;,
   &quot;/dev/rtc&quot;,&quot;/dev/hpet&quot;, &quot;/dev/vfio/vfio&quot;,
   &quot;/dev/vfio/15&quot;, &quot;/dev/vfio/16&quot;
]
&lt;/pre&gt;&lt;p&gt;Next we’ll need to modify the Apparmor profile for libvirt to give it access to our VFIO devices. The &lt;a href=&quot;https://help.ubuntu.com/community/KVM/Managing#Apparmor_Modification&quot;&gt;KVM Manage Ubuntu guide&lt;/a&gt; was useful here.&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;sudo gedit /etc/apparmor.d/abstractions/libvirt-qemu&lt;/pre&gt;&lt;p&gt;Add the following to the file and while also updating your vfio paths:&lt;br/&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;  # VFIO access
  /dev/vfio/* rw,

  # USB passthrough
  /dev/bus/usb/[0-9]*/[0-9]* rw,

  # Unknown 16.10
  /proc/[0-9]*/task/[0-9]*/comm rw,
  /run/udev/data/* r,
  /etc/host.conf r,
  /etc/nsswitch.conf r,
  capability wake_alarm,
&lt;/pre&gt;&lt;p&gt;Restart apparmor and libvirtd:&lt;br/&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
sudo service apparmor restart
sudo service virtlogd restart
&lt;/pre&gt;
&lt;p&gt;Try to start the Windows 10 guest now using virt-manager&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;virt-manager&lt;/pre&gt;
&lt;p&gt;
Connect to QEMU/KVM and hit the play button. It&amp;rsquo;s also somewhat convenient to do USB passthrough here.
&lt;/p&gt;
&lt;p&gt;If you notice things aren’t working keep an eye on dmesg and then edit the Apparmor profile further to give additional access to libvirt.&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;Benchmark&lt;/h2&gt;
My machine seems to have a minor 2 frame per second hit over bare metal in benchmarks. If you would like to analyze my benchmark result further take a look here: &lt;a href=&quot;http://www.3dmark.com/compare/fs/11182166/fs/8229002&quot;&gt;http://www.3dmark.com/compare/fs/11182166/fs/8229002&lt;/a&gt;

&lt;h2&gt;Windows 10 Guest Autostart&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;If everything was successful you should now be able to autostart your virtual machine on boot with:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;virsh autostart windows10&lt;/pre&gt;&lt;h2&gt;(Optional) Next Steps&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Remove crackle from your sound by enabling &lt;a href=&quot;http://vfio.blogspot.com/2014/09/vfio-interrupts-and-how-to-coax-windows.html&quot;&gt;MSI interrupts for HDMI audio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://jrs-s.net/2013/05/17/kvm-io-benchmarking/&quot;&gt;Improve guest I/O performance&lt;/a&gt; by using &lt;a href=&quot;https://www.latentexistence.me.uk/zfs-and-ubuntu-home-server-howto/&quot;&gt;ZFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Set up mouse and keyboard sharing with &lt;a href=&quot;https://symless.com/nightly&quot;&gt;Synergy&lt;/a&gt; or &lt;a href=&quot;https://www.kraxel.org/blog/2016/04/linux-evdev-input-support-in-qemu-2-6/&quot;&gt;evdev&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/KVM/Managing#Apparmor_Modification&quot;&gt;Pass through USB devices&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Replace virtio with virtio-scsi to enable &lt;a href=&quot;https://chrisirwin.ca/posts/discard-with-kvm/&quot;&gt;thin client discard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="vfio" /><category term="ubuntu" /><category term="kvm" /><category term="radeon" /><category term="crossfire" /><category term="xdma" /><category term="passthrough" /><summary type="html">I have used Windows as my primary OS ever since I was a teenager because I am a gamer. Ironically, my gaming hobby also introduced me to my programming/Linux hobby (and now career) which are always at odds with one another. I can either game, which has an unfortunate requirement of needing Windows, or hack, which usually requires Linux. This meant I had to constantly dual boot between Windows and Linux or suffer with a virtual machine with poor video performance. Not ideal.However, a few years ago the Linux Kernel Virtual Machine (KVM) project enabled near native Windows guest performance by passing through a host video card to a guest. I was extremely interested in trying this out but was deterred by a lack of proof that SLI or CrossFire worked since my other, other hobby is also being a hardware enthusiast.All that changed when I discovered a post authored by Duelist detailing that he had successfully got his XDMA Radeons to run in CrossFire! I gave it a try it myself and found that documentation was sparse and mostly geared towards Arch Linux. I have a preference for Ubuntu and couldn’t really find anything modern that would help me. All in all, I was successful and am extremely happy with the performance of my box. Hopefully this guide will also help others that have multiple Radeons that they wish to CrossFire!Note: Large parts of this guide have been pieced together from various tutorials and user posts from around the web. The Puget Systems Ubuntu 14.04 + KVM guide is a great Ubuntu starting point when paired with QEMU-KVM on Arch Linux Guide. If you get stuck the Arch Linux PCI passthrough via OVMF wiki, the Arch Linux forums, or the /r/VFIO wiki are other valuable references.System RequirementsCPU VT-d support Motherboard can enable VT-d support 2+ Radeon eGPUs with XDMA CrossFire and UEFI BIOS support Intel iGPU or a third eGPU BIOS Enable VT-d virtualization in your BIOS and enable your integrated GPU.Ubuntu SetupInstall Ubuntu 16.10 or 17.04 if you want virt-manager because it comes with a more modern libvirt 2.1 than Ubuntu 16.04 LTS.</summary></entry><entry><title type="html">Intel Smart Response Technology vs Windows 10 Tiered Storage Spaces</title><link href="http://localhost:4000/2016/11/22/intel-smart-response-technology-vs-windows-10.html" rel="alternate" type="text/html" title="Intel Smart Response Technology vs Windows 10 Tiered Storage Spaces" /><published>2016-11-22T18:31:25-08:00</published><updated>2016-11-22T18:31:25-08:00</updated><id>http://localhost:4000/2016/11/22/intel-smart-response-technology-vs-windows-10</id><content type="html" xml:base="http://localhost:4000/2016/11/22/intel-smart-response-technology-vs-windows-10.html">&lt;p&gt;I have used Intel’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_Response_Technology&quot;&gt;SRT (Smart Response Technology)&lt;/a&gt; as a way to boost the performance of my slow spinner hard drives ever since they introduced the SSD caching technology alongside the Z68 chipset for Sandybridge in 2011. SRT works by caching heavily used data onto the speedy SSD with a fall back to the HDD at the minor cost of requiring a RAID driver on Windows boot.&lt;/p&gt;&lt;figure data-orig-width=&quot;540&quot; data-orig-height=&quot;276&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/4892724468d086a1a53c6c3078f141ad/tumblr_inline_oh2l7m7D1W1rkukje_540.png&quot; data-orig-width=&quot;540&quot; data-orig-height=&quot;276&quot; alt=&quot;image&quot;/&gt;&lt;/figure&gt;&lt;p&gt;The technology behind Intel’s SRT is nothing new and has been standard in the industry as a way to boost the performance of database servers. The software has been reimplemented many times in the form of flashcache, ZFS, and bcache. Not wanting to be left out of the server market, Microsoft also implemented &lt;a href=&quot;https://blogs.technet.microsoft.com/josebda/2013/08/28/step-by-step-for-storage-spaces-tiering-in-windows-server-2012-r2/&quot;&gt;tiered storage spaces&lt;/a&gt; for Windows Server 2012 by following the same concept but adding their own twist. They introduce a hot/cold tier concept where the SSD is portion is self-balancing and keeps hot data within itself for fast access.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Enthusiast’s who want their games to load fast without shelling out $$$ for a large capacity SSD were stuck with using Intel’s SRT because Microsoft never ported the tiered storage space technology to Windows 10. This was &lt;a href=&quot;https://www.reddit.com/r/Windows10/comments/3p11i0/10565_has_vastly_improved_storage_spaces/&quot;&gt;until Windows 10 build 10565 secretly introduced it without any press release&lt;/a&gt;. &lt;br/&gt;&lt;/p&gt;&lt;p&gt;Microsoft’s tiered storage space technology ought to be more advanced than Intel’s software based caching and should be able to replace it and perform better. My personal goal was to do that and then measure it.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Setting up a Simple Tiered Storage Space on Windows 10 &lt;/b&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;It was nearly impossible to find documentation on how to set up tiered storage spaces on Windows 10. I wanted to create a setup similar to what I had in the SRT where I paired a single HDD with a SSD. In the end I pieced together &lt;a href=&quot;http://windowsitpro.com/windows-server-2012-r2/powershell-storage-space-creation-tips&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;http://www.van-gelderen.eu/vworkspace-hyper-v-with-tiered-storage-pools-part1/&quot;&gt;guides&lt;/a&gt; meant for Windows Server and created some rough instructions that need to be entered into a Powershell:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;#Variables&lt;br/&gt;$StoragePoolName = &quot;My Storage Pool&quot;&lt;br/&gt;$TieredSpaceName = &quot;My Tiered Space&quot;&lt;br/&gt;$ResiliencySetting = &quot;Simple&quot;&lt;br/&gt;$SSDTierName = &quot;SSDTier&quot;&lt;br/&gt;$HDDTierName = &quot;HDDTier&quot;&lt;br/&gt;
#List all disks that can be pooled and output in table format (format-table)
Get-PhysicalDisk -CanPool $True | ft FriendlyName,OperationalStatus,Size,MediaType
&lt;br/&gt;#Store all physical disks that can be pooled into a variable, $PhysicalDisks&lt;br/&gt;$PhysicalDisks = (Get-PhysicalDisk -CanPool $True | Where MediaType -NE UnSpecified)       
&lt;br/&gt;#Create a new Storage Pool using the disks in variable $PhysicalDisks with a name of My Storage Pool
$SubSysName = (Get-StorageSubSystem).FriendlyName
New-StoragePool -PhysicalDisks $PhysicalDisks -StorageSubSystemFriendlyName $SubSysName -FriendlyName $StoragePoolName
&lt;br/&gt;#View the disks in the Storage Pool just created
Get-StoragePool -FriendlyName $StoragePoolName | Get-PhysicalDisk | Select FriendlyName, MediaType
&lt;br/&gt;#Create two tiers in the Storage Pool created. One for SSD disks and one for HDD disks
$SSDTier = New-StorageTier -StoragePoolFriendlyName $StoragePoolName -FriendlyName $SSDTierName -MediaType SSD
$HDDTier = New-StorageTier -StoragePoolFriendlyName $StoragePoolName -FriendlyName $HDDTierName -MediaType HDD
&lt;br/&gt;#Identify tier sizes within this storage pool&lt;br/&gt;$SSDTierSizes = (Get-StorageTierSupportedSize -FriendlyName $SSDTierName -ResiliencySettingName $ResiliencySetting).TierSizeMax&lt;br/&gt;$HDDTierSizes = (Get-StorageTierSupportedSize -FriendlyName $HDDTierName -ResiliencySettingName $ResiliencySetting).TierSizeMax 
&lt;br/&gt;#Create a new virtual disk in the pool with a name of TieredSpace using the SSD and HDD tiers&lt;br/&gt;New-VirtualDisk -StoragePoolFriendlyName $StoragePoolName -FriendlyName $TieredSpaceName -StorageTiers $SSDTier, $HDDTier -StorageTierSizes $SSDTierSizes, $HDDTierSizes -ResiliencySettingName $ResiliencySetting  -AutoWriteCacheSize -AutoNumberOfColumns&lt;br/&gt;&lt;br/&gt;#Alternatively try adjusting the sizes manually:&lt;br/&gt;#New-VirtualDisk -StoragePoolFriendlyName $StoragePoolName -FriendlyName $TieredSpaceName -StorageTiers @($SSDTier,$HDDTier) -StorageTierSizes @(228GB,1.816TB) -ResiliencySettingName $ResiliencySetting -AutoWriteCacheSize -AutoNumberOfColumns&lt;br/&gt;&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;Benchmarks&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The hard drive that I’m using in all these is a &lt;a href=&quot;https://www.hgst.com/sites/default/files/resources/DS5K3000_ds.pdf&quot;&gt;2TB Hitachi Deskstar 5K3000 (HDS5C3020ALA632)&lt;/a&gt;. The solid state drive that I’m using is a &lt;a href=&quot;http://www.samsung.com/us/computing/memory-storage/solid-state-drives/ssd-850-evo-2-5-sata-iii-250gb-mz-75e250b-am/&quot;&gt;250GB Samsung 850 EVO&lt;/a&gt;. My system is powered by a 4690K, ASUS Z87 Pro, and 32GB of RAM.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Let’s start off by just looking at the Hitachi itself by using &lt;a href=&quot;http://crystalmark.info/software/CrystalDiskMark/index-e.html&quot;&gt;CrystalDiskMark&lt;/a&gt;:&lt;br/&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/83932096652d6c842d10cd1513af3178/tumblr_inline_oh2nkvOeZr1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;/&gt;&lt;/figure&gt;&lt;p&gt;As shown, the Hitachi performs like any other spinning disk drive where any kind of random reads and writes suck.&lt;/p&gt;&lt;p&gt;Let’s take a look at what the numbers look like when we pair the Hitachi with the 850 EVO using a 64GB cache at the&lt;a href=&quot;http://www.intel.com/content/www/us/en/support/boards-and-kits/000005501.html&quot;&gt; maximized acceleration mode with Intel RST&lt;/a&gt;.&lt;/p&gt;&lt;figure data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/3f11d6ae1ccc19b251f373efa2209467/tumblr_inline_oh2mzxpCw31rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt;&lt;/p&gt;&lt;p&gt;Performance improved slightly but the cache didn’t kick in because of the nature of how RST works.&lt;/p&gt;&lt;p&gt;Let’s take a look at what Windows 10 tiered storage spaces can do.&lt;br/&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/f54d32412898575ccf6cea9fe5c8f691/tumblr_inline_oh2mz3jVcR1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;402&quot; data-orig-height=&quot;367&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Huge improvement there especially with regard to writes! It’s pretty clear that tiered storage spaces offer some benefit over Intel SRT for this kind of work load.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;I haven’t had a chance to measure game load times but I’ve been running a tiered storage space system for over a year and haven’t noticed any regression with the game load times. If someone else goes through the trouble of doing this migration please do measure before and after and let me know!&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Good luck!&lt;br/&gt;&lt;/p&gt;</content><author><name></name></author><category term="intel" /><category term="srt" /><category term="storage space" /><category term="ssd" /><category term="cache" /><category term="rst" /><category term="tiered storage space" /><category term="windows" /><category term="gaming" /><summary type="html">I have used Intel’s SRT (Smart Response Technology) as a way to boost the performance of my slow spinner hard drives ever since they introduced the SSD caching technology alongside the Z68 chipset for Sandybridge in 2011. SRT works by caching heavily used data onto the speedy SSD with a fall back to the HDD at the minor cost of requiring a RAID driver on Windows boot.The technology behind Intel’s SRT is nothing new and has been standard in the industry as a way to boost the performance of database servers. The software has been reimplemented many times in the form of flashcache, ZFS, and bcache. Not wanting to be left out of the server market, Microsoft also implemented tiered storage spaces for Windows Server 2012 by following the same concept but adding their own twist. They introduce a hot/cold tier concept where the SSD is portion is self-balancing and keeps hot data within itself for fast access.Enthusiast’s who want their games to load fast without shelling out $$$ for a large capacity SSD were stuck with using Intel’s SRT because Microsoft never ported the tiered storage space technology to Windows 10. This was until Windows 10 build 10565 secretly introduced it without any press release. Microsoft’s tiered storage space technology ought to be more advanced than Intel’s software based caching and should be able to replace it and perform better. My personal goal was to do that and then measure it.</summary></entry><entry><title type="html">LEDE and Debian on the NETGEAR Centria N900</title><link href="http://localhost:4000/2016/11/22/lede-and-debian-on-the-netgear-centria-n900.html" rel="alternate" type="text/html" title="LEDE and Debian on the NETGEAR Centria N900" /><published>2016-11-22T16:07:21-08:00</published><updated>2016-11-22T16:07:21-08:00</updated><id>http://localhost:4000/2016/11/22/lede-and-debian-on-the-netgear-centria-n900</id><content type="html" xml:base="http://localhost:4000/2016/11/22/lede-and-debian-on-the-netgear-centria-n900.html">&lt;p&gt;I authored a post on &lt;a href=&quot;http://nils.schimmelmann.us/2019/10/24/2014-09-28-i-liberated-my-netgear-centria-n900-router.html&quot;&gt;liberating a WNDR4700 router&lt;/a&gt; more than two years ago which garnered some interest in the community on developing a proper OpenWRT image. I’m happy to report that it &lt;a href=&quot;https://forum.openwrt.org/viewtopic.php?id=45592&amp;amp;p=5&quot;&gt;finally happened&lt;/a&gt;! The &lt;a href=&quot;https://www.lede-project.org/&quot;&gt;LEDE (Linux Embedded Development Environment)&lt;/a&gt; team is fully supporting the apm821xx system-on-chip and are generating nightly firmware images for our use.&lt;br/&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;100&quot; data-orig-height=&quot;100&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/a61dd05f83bb17e3f9f9d0cf2b71af86/tumblr_inline_oh2w28n5rb1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;100&quot; data-orig-height=&quot;100&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Instructions for installing LEDE on your WNDR4700/WNDR4720&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Read the following documentation: &lt;a href=&quot;https://lede-project.org/docs/guide-quick-start/start&quot;&gt;https://lede-project.org/docs/guide-quick-start/start&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Download the LEDE factory image firmware: &lt;a href=&quot;https://downloads.lede-project.org/snapshots/targets/apm821xx/nand/lede-apm821xx-nand-WNDR4700-squashfs-factory.img&quot;&gt;https://downloads.lede-project.org/snap … actory.img&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Flash the LEDE factory image as a firmware upgrade using the router’s web interface.&lt;/li&gt;&lt;li&gt;SSH in to install LuCI: &lt;pre class=&quot;prettyprint&quot;&gt;opkg update &amp;amp;&amp;amp; opkg install luci-ssl&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Everything should be working but USB and the SD Card reader. In order to get that working then:&lt;br/&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Download this binary firmware: &lt;a href=&quot;https://app.box.com/s/zvn8d3xfvs9yfzh0rfjqi49l4bb4nimz&quot;&gt;uPD72020x-firmware_2_powerpc_464fp.ipk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Install the above firmware using: &lt;pre class=&quot;prettyprint&quot;&gt;opkg install uPD72020x-firmware_2_powerpc_464fp.ipk&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Reboot and bask in the glory of your upgraded router!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;Next up we’re going to install Debian&lt;/b&gt;&lt;/p&gt;


&lt;p&gt;You will need to either add a USB flash stick or a physical hard drive into your WNDR4700 for this.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Partition your drive to have a 1GB swap with the rest being ext4&lt;/li&gt;&lt;li&gt;Log into the LuCI interface to mount the drives&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Head over to System &amp;gt; Mount Points&lt;/li&gt;&lt;li&gt;Add the ext4 partition as a /mnt custom mount point&lt;/li&gt;&lt;li&gt;Add the swap partition and activate it&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Next up we need to adjust Local Startup script. Head over to System &amp;gt; Startup and scroll down. Edit your local script to be similar to:&lt;/li&gt;&lt;/ol&gt;&lt;pre class=&quot;prettyprint&quot;&gt;# Put your custom commands here that should be executed once&lt;br/&gt;# the system init finished. By default this file does nothing.&lt;br/&gt;&lt;br/&gt;mkdir -p /mnt/dev /mnt/tmp /mnt/openwrt-root /mnt/lib/modules&lt;br/&gt;&lt;br/&gt;mount -o bind /dev /mnt/dev&lt;br/&gt;mount /tmp /mnt/tmp&lt;br/&gt;&lt;br/&gt;# Expose OpenWRT root&lt;br/&gt;mount / /mnt/openwrt-root&lt;br/&gt;&lt;br/&gt;# Kernel modules need to be available&lt;br/&gt;mount /lib/modules /mnt/lib/modules&lt;br/&gt;&lt;br/&gt;# Start Debian&lt;br/&gt;chroot /mnt /myinit&lt;br/&gt;&lt;br/&gt;exit 0&lt;/pre&gt;&lt;p&gt;We will now install Debian with debootstrap while utilizing the LEDE kernel. Reference &lt;a href=&quot;https://www.debian.org/releases/stable/amd64/apds03.html.en&quot;&gt;this material&lt;/a&gt; if you run into trouble.&lt;br/&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Install debootstrap: &lt;pre class=&quot;prettyprint&quot;&gt;opkg update &amp;amp;&amp;amp; opkg install debootstrap&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Install Debian using debootstrap: &lt;pre class=&quot;prettyprint&quot;&gt;debootstrap --arch powerpc jessie /mnt &lt;a href=&quot;http://ftp.us.debian.org/debian&quot;&gt;http://ftp.us.debian.org/debian&lt;/a&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Chroot into Debian and prime it for use:&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class=&quot;prettyprint&quot;&gt;mount -o bind /dev /mnt/dev&lt;br/&gt;mount -t sysfs none /mnt/sys&lt;br/&gt;mount -t proc none /mnt/proc&lt;br/&gt;mount -t devpts devpts /mnt/dev/pts&lt;br/&gt;&lt;br/&gt;LANG=C.UTF-8 chroot /mnt /bin/bash&lt;br/&gt;apt-get update &amp;amp;&amp;amp; apt-get -y upgrade&lt;br/&gt;&lt;br/&gt;dpkg-reconfigure tzdata&lt;br/&gt;&lt;br/&gt;apt-get install -y locales &amp;amp;&amp;amp; dpkg-reconfigure locales&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;We already configured our rc.local under LEDE to chroot into /mnt/myinit on system reboot. This file will start all the necessary Debian services.&lt;br/&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create this file under /myinit&lt;/li&gt;&lt;/ol&gt;&lt;pre class=&quot;prettyprint&quot;&gt;#!/bin/bash&lt;br/&gt;&lt;br/&gt;# Mount&lt;br/&gt;mount -t sysfs none /sys&lt;br/&gt;mount -t proc none /proc&lt;br/&gt;mount -t devpts devpts /dev/pts&lt;br/&gt;sleep 3&lt;br/&gt;&lt;br/&gt;# Start Services&lt;br/&gt;/etc/init.d/dbus start&lt;br/&gt;&lt;br/&gt;# Disabled Services&lt;br/&gt;#/etc/init.d/ssh start&lt;br/&gt;#/etc/init.d/cron start&lt;br/&gt;#/etc/init.d/unattended-upgrades start&lt;br/&gt;#/etc/init.d/php5-fpm start&lt;br/&gt;#/etc/init.d/mysql start&lt;br/&gt;#/etc/init.d/nginx start&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;If you reboot everything should now work and Debian should automatically start the services from /myinit too. I have also altered my LEDE environment to use SSH port 2222 and LuCI to use 8080 and 4443 as the ports. This allowed me to install SSH and nginx on Debian and use the standard ports. Good luck!&lt;br/&gt;&lt;/p&gt;</content><author><name></name></author><category term="hacking" /><category term="wndr4700" /><category term="debian" /><category term="linux" /><category term="openwrt" /><summary type="html">I authored a post on liberating a WNDR4700 router more than two years ago which garnered some interest in the community on developing a proper OpenWRT image. I’m happy to report that it finally happened! The LEDE (Linux Embedded Development Environment) team is fully supporting the apm821xx system-on-chip and are generating nightly firmware images for our use.</summary></entry><entry><title type="html">Modded R9 390X BIOS for the PowerColor PCS+ R9 290/290X</title><link href="http://localhost:4000/2016/03/13/modded-r9-390x-bios-for-the-powercolor-pcs-r9.html" rel="alternate" type="text/html" title="Modded R9 390X BIOS for the PowerColor PCS+ R9 290/290X" /><published>2016-03-13T13:18:38-07:00</published><updated>2016-03-13T13:18:38-07:00</updated><id>http://localhost:4000/2016/03/13/modded-r9-390x-bios-for-the-powercolor-pcs-r9</id><content type="html" xml:base="http://localhost:4000/2016/03/13/modded-r9-390x-bios-for-the-powercolor-pcs-r9.html">&lt;p&gt;&lt;figure data-orig-width=&quot;545&quot; data-orig-height=&quot;303&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/f609ad3689666ae9d0ef2d324e27ab6d/tumblr_inline_o3rhj3d3RM1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;545&quot; data-orig-height=&quot;303&quot;/&gt;&lt;/figure&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;I am a PC enthusiast and enjoy putting together computers, modding them, and subsequently &lt;a href=&quot;http://nils.schimmelmann.us/2019/10/24/2015-09-07-how-to-blow-your-budget-water-cooling-your-pc.html&quot;&gt;writing about it&lt;/a&gt;. I am also the tinkering owner of two PowerColor PCS+ R9 290 video cards that I have used now for over a year. This is the story of how I worked to break through the overclocking ceiling that was being limited by the stock BIOS.&lt;/p&gt;&lt;p&gt;I picked the PowerColor PCS+ R9 290 cards as my purchase choice because they are amazing workhorses. They are factory overclocked at 1040/1350 MHz core and memory and are competitively priced compared to other manufacturers. They are also differentiated from reference R9 290s cards due to the additional 50 millivolts of voltage that has been added to their core voltage and a heavy cooler which make them great overclockers. I have been able to overclock the pair of cards to 1120/1450 MHz core and memory until one of the cards died and I had to send it in for RMA.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;My journey into BIOS modding started here. After a few weeks of waiting I received a PCS+ R9 290 model in the mail that came with Samsung memory. This was somewhat problematic since my other card had Hynix memory but I considered myself lucky because Samsung is well known by the overclocking community to be the best manufacturer of GDDR5 memory. Their memory is able to perform at a tighter set of timings and overclock at a higher frequency compared to what other manufacturers’ products are capable of (and therefore should be superior to my other card with Hynix memory).&lt;/p&gt;&lt;p&gt;I happily plugged the card in and got straight to overclocking where I was horrified to find that I could never push the card past 1150/1375. The Samsung RAM &lt;i&gt;refused &lt;/i&gt;to overclock beyond that! There had to be a way to get this card to overclock more and I was dead set to figure out how through research.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2&gt;&lt;b&gt;Analyzing the PowerColor PCS+ PCB&lt;/b&gt;&lt;br/&gt;&lt;/h2&gt;&lt;figure data-orig-width=&quot;1866&quot; data-orig-height=&quot;755&quot; class=&quot;tmblr-full&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/1bb8bc745c59d51badab8e9c117f2cf0/tumblr_inline_o3r8gpXG5R1rkukje_540.jpg&quot; alt=&quot;image&quot; data-orig-width=&quot;1866&quot; data-orig-height=&quot;755&quot;/&gt;&lt;/figure&gt;&lt;p&gt;I knew that I had two PCS+ cards that should overclock similarly given what I knew about Hynix and Samsung RAM. Looking at the physical cards, the PowerColor PCS+ R9 290 series seemed to manufactured on the same non-reference PCB. The PCB revision used in the PCS+ R9 290 series is on the card as shown within the red rectangle in the image above. My two R9 290 cards came with the
&lt;b&gt;LF R29F V1.0&lt;/b&gt; 

 revision and are therefore pretty much identical.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;If the cards have an identical wiring layout that means that the problem was elsewhere. The handicapped Samsung card should perform better or the same given that it had the same PCB. As such, I started looking at other areas and discovered that there was another difference in the BIOS used within the software of each card. I used GPU-Z to view the BIOS and noticed the following versions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hynix w/ BIOS version 

&lt;a href=&quot;https://www.techpowerup.com/vgabios/155657/powercolor-r9290-4096-140205-1.html&quot;&gt;015.044.000.002.000000&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Samsung w/ BIOS version &lt;a href=&quot;https://www.techpowerup.com/vgabios/168095/powercolor-r9290-4096-150104.html&quot;&gt;

015.048.000.032.000000 &lt;br/&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I figured that perhaps my Samsung’s card BIOS had a bug. If I could find an alternative/newer BIOS perhaps that would fix the issue. I visited the Techpulse VGA BIOS Collection and started looking for a replacement BIOS. Unfortunately, none of the BIOSes in the collection supported Samsung memory and a reckless test flash with the wrong memory type quickly resulted in failed BOOT verifying that I had no luck. I flashed back to the original BIOS and begrudgingly left my clocks at stock while I worked on other side projects.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;The Hawaii modding scene takes off!&lt;/b&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;A few months later the R9 390 series was released which gave the overclocking community a new window in comparing the 290 series with the 390 series. The 390 series was a re-brand of the same Hawaii GPU used in the R9 290 series which also used a fundamentally identical BIOS with minor changes (RAM size, clock speed, version, etc). The overclocking community coupled this information with other ground breaking discoveries to start the 290 series to 390 series BIOS modding scene &lt;a href=&quot;http://www.overclock.net/t/1561372/hawaii-bios-editing-290-290x-295x2-390-390x&quot;&gt;renaissance&lt;/a&gt; where they started to &lt;a href=&quot;http://www.overclock.net/t/1564219/modded-r9-390x-bios-for-r9-290-290x-updated-02-16-2016&quot;&gt;provide 390 series BIOSes that were designed for the 290 series&lt;/a&gt;. &lt;br/&gt;&lt;/p&gt;&lt;p&gt;I played around with these BIOS mods and noticed that they were usually designed for reference PCBs.I did some testing and was upset to find that these BIOSes were not stable on my cards. All BIOSes are designed for a particular PCB and PowerColor’s PCB had diverged away enough from the reference design that I couldn’t use it. I would need to find a BIOS that was for my PCB.&lt;/p&gt;&lt;p&gt; I looked for a PowerColor R9 390 series BIOS, hoping that it shared my PCB, and found a set of the stock PCS+ 390 BIOSes:&lt;br/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;390 w/ BIOS version 
&lt;a href=&quot;https://www.techpowerup.com/vgabios/173026/powercolor-r9390-8192-150527.html&quot;&gt;015.049.000.000.000000 &lt;br/&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;390X w/ BIOS version &lt;a href=&quot;http://www.overclock.net/t/1564219/modded-r9-390x-bios-for-r9-290-290x-updated-02-16-2016/610#post_24517596&quot;&gt;015.049.000.004.000000&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now I had to verify now that these PCS+ R9 390 cards used the same PCB. I wasn’t about to go out and buy a card just to verify this so I used a search engine to find a “PowerColor R9 390 PCB” images and discovered that PowerColor had slightly revised their PCBs when moving from the 290 to the 390 series. The 290 PCB revision was LF R29F V1.0 and was now the &lt;b&gt;LF R29FA V1.0&lt;/b&gt; revision in the 390 series.&lt;/p&gt;&lt;figure data-orig-width=&quot;640&quot; data-orig-height=&quot;644&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/0c8d12c843cffab124169a2e7f2e3fca/tumblr_inline_o6dpd4B8M71rkukje_540.jpg&quot; alt=&quot;image&quot; data-orig-width=&quot;640&quot; data-orig-height=&quot;644&quot;/&gt;&lt;/figure&gt;&lt;p&gt;



This sparked some research which revealed that PowerColor had &lt;a href=&quot;https://forums.overclockers.co.uk/showpost.php?p=28126577&amp;amp;postcount=6032&quot;&gt;“cheaped down PCB&lt;/a&gt;“ and altered the voltage regulation system on the PCB.

However, the PCBs still used the same  IR 3567 voltage controller so it could be similar enough to work in most regards. If the PCBs were so similar between the 290 and 390 series then perhaps the newer BIOS on the 390 series might include a bug fix for my Samsung card.&lt;/p&gt;&lt;p&gt;I now wanted to mod a PCS+ 390 BIOS to make compatible with my PCS+ 290 cards.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Comparing the 290 and 390 series&lt;br/&gt;&lt;/b&gt;&lt;/h2&gt;&lt;figure data-orig-width=&quot;592&quot; data-orig-height=&quot;469&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/855d832a98b5c8bccd8b98fb30501e48/tumblr_inline_o3rebn4NsM1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;592&quot; data-orig-height=&quot;469&quot;/&gt;&lt;/figure&gt;&lt;p&gt;The R9 390 series are fundamentally identical to the R9 290 series with the exception of their:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Memory timings (More straps vs Less straps)&lt;/li&gt;&lt;li&gt;Physical memory (8GB vs 4GB)&lt;/li&gt;&lt;li&gt;Clock speed (1010/1500 vs 1040/1350)&lt;/li&gt;&lt;li&gt;Base voltage (900mV vs 993mV)&lt;/li&gt;&lt;li&gt;ASIC Quality (Refined vs Older)&lt;/li&gt;&lt;li&gt;Voltage regulation (Determined by PCB)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Of these changes the only thing that is physically different is the amount of physical memory and ASIC quality. Everything else is dictated in software by the BIOS which means most of these enhancements can be programmed or transferred.&lt;/p&gt;&lt;p&gt;The memory timings improvement was generally accepted as a refinement in the BIOS to support more straps. Straps are essentially a range of MHz where certain memory timings are used to keep the memory stable at that clock speed. Memory timings are also specific to a particular memory manufacturer so I would need to select the right memory timings for Samsung or Hynix.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;The physical memory amount is just a function of the density of the RAM chips. There are always exactly 32 GDDR5 RAM chips on a Hawaii GPU. The 290 series simply has half the density compared to the 390 series and as such each chip has 64MB as opposed to 128MB. If I wanted to mod the BIOS I would therefore need to reduce the density.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Clock speed and base voltage are related to the ASIC quality. ASIC quality is a measure of how refined the GPU manufacturing process was and how much leakage the transistors provide. Generally there shouldn’t be too much of a difference but AMD has been tweaking/improving the manufacturing process so there should be less leaking in a R9 390 than an early release R9 290. This improvement in ASIC quality is most likely why the R9 390 series has such a lower base voltage than that of the R9 290 series. I would most likely need to still use the original voltage.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Voltage regulation is determined by the voltage controller and also VRMs on the PCB. This would continue to be one of the huge unknowns in the entire project given that the LF RF29A PCB was altered for the worse. The only way to safely play around with the voltage regulation would be copying sections of BIOSes that manage this into the PCS+ 390 BIOS.&lt;/p&gt;&lt;p&gt;Knowing all of this, I should be able to take a R9 390 series BIOS and adjust the memory timings, density, clock speed, and voltage to match that of a R9 290 series and keep it stable.&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Modding the BIOS&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Armed with a hex editor, forum documentation, and a ton of other tools of Hawaii BIOS modding I got to work. I used Atomdis, HxD, HD7xxx Series UEFI Patch Tool, and HawaiiReader (&lt;a href=&quot;http://www.overclock.net/t/1561372/hawaii-bios-editing-290-290x-295x2-390-390x&quot;&gt;all found here&lt;/a&gt;) to mod the PCS R9 390 base BIOS with all the changes that I needed to do. I also referenced a set of modded 390X BIOS for 290 series BIOSes that can be found &lt;a href=&quot;http://www.overclock.net/t/1564219/modded-r9-390x-bios-for-r9-290-290x-updated-02-16-2016&quot;&gt;here&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;After a lot of trail and error, I found that I only needed to perform the following mods:&lt;br/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4GB memory mod&lt;/li&gt;&lt;li&gt;Enhanced memory timings for each strap and memory type&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Replace the PCS+ 390/390X PowerPlay with a reference 390/390X PowerPlay to stabilize voltage regulation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I ended up creating the following BIOS combinations:&lt;/p&gt;&lt;p&gt;&lt;b&gt;Stock with a Performance Boost:&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;290 BIOS with 390 Memory Controller&lt;br/&gt;&lt;/li&gt;&lt;li&gt;290X BIOS with 390 Memory Controller&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;390X with 290X Temperatures/Overclocking:&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;390 BIOS with 290 Power Play&lt;br/&gt;&lt;/li&gt;&lt;li&gt;390X BIOS with 290X Power Play&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;390X with Low Voltage/Temperatures/Reduced Overclocking:&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;390 BIOS with 390 Power Play&lt;br/&gt;&lt;/li&gt;&lt;li&gt;390X BIOS with 390X Power Play&lt;br/&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;Benchmarks&lt;/b&gt;&lt;br/&gt;&lt;/h2&gt;&lt;figure data-orig-width=&quot;1188&quot; data-orig-height=&quot;659&quot; class=&quot;tmblr-full&quot;&gt;&lt;img src=&quot;https://66.media.tumblr.com/4dbfa0d6dd38344dd0d77485e2be3cf1/tumblr_inline_o3r9mij90g1rkukje_540.png&quot; alt=&quot;image&quot; data-orig-width=&quot;1188&quot; data-orig-height=&quot;659&quot;/&gt;&lt;/figure&gt;&lt;p&gt;The end result of my BIOS mod is that I am finally able to overclock my Samsung card’s memory beyond 1375 MHz. In fact, I am able to reach &lt;i&gt;1540 MHz RAM&lt;/i&gt; using both my Samsung and Hynix cards thereby managing to eek out an &lt;a href=&quot;http://www.3dmark.com/compare/fs/7794373/fs/7785319&quot;&gt;additional 6% of performance according to 3dMark&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;

I also ended up playing around with a 290/290X BIOS and discovered that simply replacing the memory controller in the BIOS with a 390 memory controller I got a free 3% performance boost.

&lt;/p&gt;&lt;p&gt;
&lt;i&gt;&lt;b&gt;11/22/2016:&lt;/b&gt; I have noticed that the other 390 BIOSes are not stable on my machines. I have decided to just use a 290 BIOS with the 390MC but will leave this post present for anyone who wants to continue to hack.
&lt;/i&gt;
&lt;/p&gt;

&lt;br/&gt;&lt;h2&gt;&lt;b&gt;Flashing to a modded R9 390 BIOS&lt;br/&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;For those who are adventurous and want to experiment, you can follow these steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Verify that you own a LF R29F V1.0 PCB revision PowerColor R9 290/290X with 4GB of memory&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Read this thread for more detailed flashing directions&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Download my modded BIOSes &lt;a href=&quot;https://app.box.com/s/xxqiotbj12nn6tsr79bkubydx12249az&quot;&gt;here&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Backup your current BIOS&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Uninstall your drivers and delete your Afterburner/Trixx profiles.&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Flash your video card&lt;/li&gt;&lt;li&gt;Reinstall the latest drivers &lt;br/&gt;&lt;/li&gt;&lt;li&gt;Play some games to test stability&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Good luck!&lt;/p&gt;&lt;ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;i&gt;Disclaimer: I am not responsible for any damage caused to your device. Always keep a backup of your original BIOS.&lt;br/&gt;&lt;/i&gt;&lt;/p&gt;</content><author><name></name></author><category term="radeon" /><category term="amd" /><category term="bios" /><category term="lf r29f" /><category term="PowerColor" /><category term="hacking" /><category term="gaming" /><category term="benchmark" /><summary type="html">IntroductionI am a PC enthusiast and enjoy putting together computers, modding them, and subsequently writing about it. I am also the tinkering owner of two PowerColor PCS+ R9 290 video cards that I have used now for over a year. This is the story of how I worked to break through the overclocking ceiling that was being limited by the stock BIOS.I picked the PowerColor PCS+ R9 290 cards as my purchase choice because they are amazing workhorses. They are factory overclocked at 1040/1350 MHz core and memory and are competitively priced compared to other manufacturers. They are also differentiated from reference R9 290s cards due to the additional 50 millivolts of voltage that has been added to their core voltage and a heavy cooler which make them great overclockers. I have been able to overclock the pair of cards to 1120/1450 MHz core and memory until one of the cards died and I had to send it in for RMA.My journey into BIOS modding started here. After a few weeks of waiting I received a PCS+ R9 290 model in the mail that came with Samsung memory. This was somewhat problematic since my other card had Hynix memory but I considered myself lucky because Samsung is well known by the overclocking community to be the best manufacturer of GDDR5 memory. Their memory is able to perform at a tighter set of timings and overclock at a higher frequency compared to what other manufacturers’ products are capable of (and therefore should be superior to my other card with Hynix memory).I happily plugged the card in and got straight to overclocking where I was horrified to find that I could never push the card past 1150/1375. The Samsung RAM refused to overclock beyond that! There had to be a way to get this card to overclock more and I was dead set to figure out how through research.</summary></entry><entry><title type="html">no title</title><link href="http://localhost:4000/2016/01/31/yvonne-in-lake-louise-the-drop-in-oil-prices-lead.html" rel="alternate" type="text/html" title="no title" /><published>2016-01-31T11:54:39-08:00</published><updated>2016-01-31T11:54:39-08:00</updated><id>http://localhost:4000/2016/01/31/yvonne-in-lake-louise-the-drop-in-oil-prices-lead</id><content type="html" xml:base="http://localhost:4000/2016/01/31/yvonne-in-lake-louise-the-drop-in-oil-prices-lead.html">&lt;iframe width=&quot;400&quot; height=&quot;225&quot;  id=&quot;youtube_iframe&quot; src=&quot;https://www.youtube.com/embed/cuxfMFyj0fU?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=https://safe.txmblr.com&amp;amp;wmode=opaque&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;h2&gt;&lt;b&gt;Yvonne in Lake Louise&lt;a href=&quot;https://www.youtube.com/watch?v=cuxfMFyj0fU&amp;amp;list=PLGisHij9UiX9gmNoYtXDAiLLvHR6JuVeS&amp;amp;vq=hd720&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;The drop in oil prices lead to a cheap Canadian dollar which in turn led to a an amazingly frugal Canadian vacation! We enjoyed our trip and would highly recommend our fellow skiers and snowboarders to check out the &lt;a href=&quot;http://www.skibig3.com/&quot;&gt;Big 3 in Banff&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cuxfMFyj0fU&amp;amp;list=PLGisHij9UiX9gmNoYtXDAiLLvHR6JuVeS&amp;amp;vq=hd720&quot;&gt;Click to view the above video in glorious 60 fps!&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;</content><author><name></name></author><category term="shredding" /><category term="lake louise" /><category term="snowboard" /><category term="banff" /><category term="outdoors" /><category term="travel" /><summary type="html">Yvonne in Lake LouiseThe drop in oil prices lead to a cheap Canadian dollar which in turn led to a an amazingly frugal Canadian vacation! We enjoyed our trip and would highly recommend our fellow skiers and snowboarders to check out the Big 3 in Banff.Click to view the above video in glorious 60 fps!</summary></entry><entry><title type="html">mojave national preserve and capitol reef national</title><link href="http://localhost:4000/2015/12/20/mojave-national-preserve-and-capitol-reef-national.html" rel="alternate" type="text/html" title="mojave national preserve and capitol reef national" /><published>2015-12-20T20:47:52-08:00</published><updated>2015-12-20T20:47:52-08:00</updated><id>http://localhost:4000/2015/12/20/mojave-national-preserve-and-capitol-reef-national</id><content type="html" xml:base="http://localhost:4000/2015/12/20/mojave-national-preserve-and-capitol-reef-national.html">&lt;img src=&quot;/tumblr_files/tumblr_nzoynsGSax1sob777o1_1280.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;/tumblr_files/tumblr_nzoynsGSax1sob777o2_r1_1280.jpg&quot;/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;&lt;b&gt;Mojave National Preserve&lt;/b&gt; and &lt;b&gt;Capitol Reef National Park&lt;/b&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;We recently bought a Subaru Forester and we decided to take it out on a crazy winter road trip to view our national treasures: our National Parks and Preserves!&lt;/p&gt;</content><author><name></name></author><category term="mojave" /><category term="subaru" /><category term="forester" /><category term="outdoors" /><category term="love" /><category term="travel" /><summary type="html">Mojave National Preserve and Capitol Reef National ParkWe recently bought a Subaru Forester and we decided to take it out on a crazy winter road trip to view our national treasures: our National Parks and Preserves!</summary></entry></feed>